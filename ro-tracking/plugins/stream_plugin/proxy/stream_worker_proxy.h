/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -c stream_workerInterface com.robot.stream_worker.xml -p stream_worker_proxy.h:stream_worker_proxy.cpp
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef STREAM_WORKER_PROXY_H
#define STREAM_WORKER_PROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.zitro.zone.zoaudio
 */
class stream_workerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.zitro.zone.zoaudio"; }

public:
    stream_workerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~stream_workerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> getAddress()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getAddress"), argumentList);
    }

    inline QDBusPendingReply<QString> getDescription()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getDescription"), argumentList);
    }

    inline QDBusPendingReply<QString> getName()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getName"), argumentList);
    }

    inline QDBusPendingReply<QString> getPluginType()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getPluginType"), argumentList);
    }

    inline QDBusPendingReply<bool> isEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("isEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setEnabled(bool bEnabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(bEnabled);
        return asyncCallWithArgumentList(QStringLiteral("setEnabled"), argumentList);
    }

    inline QDBusPendingReply<> start()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("start"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void error(bool bError);
};

#endif
