/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -c piccontroller_workerInterface -a piccontroller_worker_interface.h:piccontroller_worker_interface.cpp com.robot.piccontroller_worker.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "piccontroller_worker_interface.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class piccontroller_workerInterface
 */

piccontroller_workerInterface::piccontroller_workerInterface(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

piccontroller_workerInterface::~piccontroller_workerInterface()
{
    // destructor
}

QString piccontroller_workerInterface::getAddress()
{
    // handle method call com.robot.roengines.getAddress
    QString out0;
    QMetaObject::invokeMethod(parent(), "getAddress", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString piccontroller_workerInterface::getDescription()
{
    // handle method call com.robot.roengines.getDescription
    QString out0;
    QMetaObject::invokeMethod(parent(), "getDescription", Q_RETURN_ARG(QString, out0));
    return out0;
}

int piccontroller_workerInterface::getDirection()
{
    // handle method call com.robot.roengines.getDirection
    int out0;
    QMetaObject::invokeMethod(parent(), "getDirection", Q_RETURN_ARG(int, out0));
    return out0;
}

int piccontroller_workerInterface::getEncoderLeft()
{
    // handle method call com.robot.roengines.getEncoderLeft
    int out0;
    QMetaObject::invokeMethod(parent(), "getEncoderLeft", Q_RETURN_ARG(int, out0));
    return out0;
}

int piccontroller_workerInterface::getEncoderRight()
{
    // handle method call com.robot.roengines.getEncoderRight
    int out0;
    QMetaObject::invokeMethod(parent(), "getEncoderRight", Q_RETURN_ARG(int, out0));
    return out0;
}

QString piccontroller_workerInterface::getName()
{
    // handle method call com.robot.roengines.getName
    QString out0;
    QMetaObject::invokeMethod(parent(), "getName", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString piccontroller_workerInterface::getPluginType()
{
    // handle method call com.robot.roengines.getPluginType
    QString out0;
    QMetaObject::invokeMethod(parent(), "getPluginType", Q_RETURN_ARG(QString, out0));
    return out0;
}

int piccontroller_workerInterface::getSpeed()
{
    // handle method call com.robot.roengines.getSpeed
    int out0;
    QMetaObject::invokeMethod(parent(), "getSpeed", Q_RETURN_ARG(int, out0));
    return out0;
}

bool piccontroller_workerInterface::isEnabled()
{
    // handle method call com.robot.roengines.isEnabled
    bool out0;
    QMetaObject::invokeMethod(parent(), "isEnabled", Q_RETURN_ARG(bool, out0));
    return out0;
}

void piccontroller_workerInterface::setDualSpeed(int left, int right)
{
    // handle method call com.robot.roengines.setDualSpeed
    QMetaObject::invokeMethod(parent(), "setDualSpeed", Q_ARG(int, left), Q_ARG(int, right));
}

void piccontroller_workerInterface::setEnabled(bool bEnabled)
{
    // handle method call com.robot.roengines.setEnabled
    QMetaObject::invokeMethod(parent(), "setEnabled", Q_ARG(bool, bEnabled));
}

void piccontroller_workerInterface::setMaximumSpeed(int speed)
{
    // handle method call com.robot.roengines.setMaximumSpeed
    QMetaObject::invokeMethod(parent(), "setMaximumSpeed", Q_ARG(int, speed));
}

void piccontroller_workerInterface::setSpeed(int speed)
{
    // handle method call com.robot.roengines.setSpeed
    QMetaObject::invokeMethod(parent(), "setSpeed", Q_ARG(int, speed));
}

void piccontroller_workerInterface::setTurn(int turn)
{
    // handle method call com.robot.roengines.setTurn
    QMetaObject::invokeMethod(parent(), "setTurn", Q_ARG(int, turn));
}

