/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -c dualshock4_workerInterface -a dualshock4_worker_interface.h:dualshock4_worker_interface.cpp com.robot.dualshock4_worker.xml
 *
 * qdbusxml2cpp is Copyright (C) 2023 The Qt Company Ltd and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "dualshock4_worker_interface.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class dualshock4_workerInterface
 */

dualshock4_workerInterface::dualshock4_workerInterface(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

dualshock4_workerInterface::~dualshock4_workerInterface()
{
    // destructor
}

void dualshock4_workerInterface::blueLedValue(int value)
{
    // handle method call com.robot.rogamepad.dualshock4.blueLedValue
    QMetaObject::invokeMethod(parent(), "blueLedValue", Q_ARG(int, value));
}

QString dualshock4_workerInterface::getAddress()
{
    // handle method call com.robot.rogamepad.dualshock4.getAddress
    QString out0;
    QMetaObject::invokeMethod(parent(), "getAddress", Q_RETURN_ARG(QString, out0));
    return out0;
}

int dualshock4_workerInterface::getCapacity()
{
    // handle method call com.robot.rogamepad.dualshock4.getCapacity
    int out0;
    QMetaObject::invokeMethod(parent(), "getCapacity", Q_RETURN_ARG(int, out0));
    return out0;
}

QString dualshock4_workerInterface::getDescription()
{
    // handle method call com.robot.rogamepad.dualshock4.getDescription
    QString out0;
    QMetaObject::invokeMethod(parent(), "getDescription", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString dualshock4_workerInterface::getName()
{
    // handle method call com.robot.rogamepad.dualshock4.getName
    QString out0;
    QMetaObject::invokeMethod(parent(), "getName", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString dualshock4_workerInterface::getPluginType()
{
    // handle method call com.robot.rogamepad.dualshock4.getPluginType
    QString out0;
    QMetaObject::invokeMethod(parent(), "getPluginType", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString dualshock4_workerInterface::getStatus()
{
    // handle method call com.robot.rogamepad.dualshock4.getStatus
    QString out0;
    QMetaObject::invokeMethod(parent(), "getStatus", Q_RETURN_ARG(QString, out0));
    return out0;
}

void dualshock4_workerInterface::greenLedValue(int value)
{
    // handle method call com.robot.rogamepad.dualshock4.greenLedValue
    QMetaObject::invokeMethod(parent(), "greenLedValue", Q_ARG(int, value));
}

bool dualshock4_workerInterface::isConnected()
{
    // handle method call com.robot.rogamepad.dualshock4.isConnected
    bool out0;
    QMetaObject::invokeMethod(parent(), "isConnected", Q_RETURN_ARG(bool, out0));
    return out0;
}

bool dualshock4_workerInterface::isEnabled()
{
    // handle method call com.robot.rogamepad.dualshock4.isEnabled
    bool out0;
    QMetaObject::invokeMethod(parent(), "isEnabled", Q_RETURN_ARG(bool, out0));
    return out0;
}

void dualshock4_workerInterface::redLedValue(int value)
{
    // handle method call com.robot.rogamepad.dualshock4.redLedValue
    QMetaObject::invokeMethod(parent(), "redLedValue", Q_ARG(int, value));
}

void dualshock4_workerInterface::setEnabled(bool bEnabled)
{
    // handle method call com.robot.rogamepad.dualshock4.setEnabled
    QMetaObject::invokeMethod(parent(), "setEnabled", Q_ARG(bool, bEnabled));
}

