/*   usb.c - The main functions for usb handle.
 *
 *  Copyright (C) 2008  Rosales Victor and German Sanguinetti.
 *  (todoesverso@gmail.com , german.sanguinetti@gmail.com)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <pic18fregs.h>
#include <string.h>
#include <stdio.h>
#include "usb.h"


// Los descriptores de dispositivo y configuración. Son usados como
// el host enumera el dispositivo y descubre que clase de dispositivo es
// y que interfaces soporta

// Tamaños en bytes de los desciptores
#define DEVICE_DESCRIPTOR_SIZE 0x12
#define CONFIG_HEADER_SIZE  0x09
#define CONFIG_DESCRIPTOR_SIZE 0x25
// EL tamaño total del descriptor de configuración es
// 0x09  +  0x09  +  0x07  +  0x07  =  0x20
#define CFSZ CONFIG_HEADER_SIZE+CONFIG_DESCRIPTOR_SIZE

// Estrucutra del descriptor de configuración
typedef struct _configStruct
{
    byte configHeader[CONFIG_HEADER_SIZE];
    byte Descriptor[CONFIG_DESCRIPTOR_SIZE];
} ConfigStruct;

// Variables globales
byte deviceState;   // Estados visibles (de USB 2.0, cap 9.1.1)
byte remoteWakeup;
byte deviceAddress;
byte selfPowered;
byte currentConfiguration;


// Etapas en la transferencia de control - ver la especif USB cap 5

// Comienzo de una transferencia de control (seguido por 0 o mas etapas de dato)
#define SETUP_STAGE    0
// Datos desde host hacia el dispositivo
#define DATA_OUT_STAGE 1
// Datos desde dispositivo hacia host
#define DATA_IN_STAGE  2
// No se usa (si el dato de Entrada/Salida anduvo bien, entonces regresa a Setup)
#define STATUS_STAGE   3

byte ctrlTransferStage; // Mantiene el estado actual en una transferencia de control
byte requestHandled;    // Establecida a 1 si la solicitud fue entendida y procesada

byte *outPtr;           // Dato para enviar al host
byte *inPtr;            // Dato proveniente del host
word wCount;            // Cantidad de bytes de dato
byte RxLen;    // # de bytes colocados dentro del buffer

// Descriptor del dispositivo
code byte deviceDescriptor[] =
{
    DEVICE_DESCRIPTOR_SIZE, 0x01, // bLength, bDescriptorType
    0x00, 0x02, // bcdUSB (low byte), bcdUSB (high byte)
    0x00, 0x00, // bDeviceClass, bDeviceSubClass
    0x00, E0SZ, // bDeviceProtocl, bMaxPacketSize
    0xD8, 0x04, // idVendor (low byte), idVendor (high byte)
    0x31, 0x75, // idProduct (low byte), idProduct (high byte)
    0x01, 0x00, // bcdDevice (low byte), bcdDevice (high byte)
    0x01, 0x02, // iManufacturer, iProduct
    0x00, 0x01  // iSerialNumber (none), bNumConfigurations
};

// wMaxPacketSize (low) del endopointIN
#define ISZ 64
// wMaxPacketSize (low) del endopointOUT
#define OSZ 64

code ConfigStruct configDescriptor =
{
    {
    // Descriptor de configuración, contiene el descriptor de la clase
    CONFIG_HEADER_SIZE, 0x02, // bLength, bDescriptorType (Configuration)
    CFSZ, 0x00, // wTotalLength (low), wTotalLength (high)
    0x01, 0x01, // bNumInterfaces, bConfigurationValue
    0x00, 0xA0, // iConfiguration, bmAttributes ()
    0x32,       // bMaxPower (100 mA)
    },
    {
    // Interfaz del descriptor
    0x09, 0x04, // bLength, bDescriptorType (Interface)
    0x00, 0x00, // bInterfaceNumber, bAlternateSetting
    0x04, 0x07, // bNumEndpoints, bInterfaceClass (Printer)
    0x01, 0x00, // bInterfaceSubclass, bInterfaceProtocol,
    0x00,       // iInterface
    // Impresora Endpoint 1 In
    0x07, 0x05, // bLength, bDescriptorType (Endpoint)
    0x81, 0x02, // bEndpointAddress, bmAttributes (Bulk)
    ISZ, 0x00,  // wMaxPacketSize (low), wMaxPacketSize (high)
    0x01,       // bInterval (1 millisecond)
    // Impresora Endpoint 1 Out
    0x07, 0x05, // bLength, bDescriptorType (Endpoint)
    0x01, 0x02, // bEndpointAddress, bmAttributes (Bulk)
    OSZ, 0x00,  // wMaxPacketSize (low), wMaxPacketSize (high)
    0x01,       // bInterval (1 millisecond)
   
    // Impresora Endpoint 2 In
    0x07, 0x05, // bLength, bDescriptorType (Endpoint)
    0x82, 0x02, // bEndpointAddress, bmAttributes (Bulk)
    ISZ, 0x00,  // wMaxPacketSize (low), wMaxPacketSize (high)
    0x01,       // bInterval (1 millisecond)
    // Impresora Endpoint 2 Out
    0x07, 0x05, // bLength, bDescriptorType (Endpoint)
    0x02, 0x02, // bEndpointAddress, bmAttributes (Bulk)
    OSZ, 0x00,  // wMaxPacketSize (low), wMaxPacketSize (high)
    0x01,       // bInterval (1 millisecond)
    }
};

//
// Descriptores String (cadenas de caracteres)
//

// Según la especificación del USB, el string de índice 0 contiene el código de lenguaje
code byte stringDescriptor0[] =
{
    0x04, STRING_DESCRIPTOR, // bLength, bDscType
    0x09, 0x04,         // Establece el wLANGID en 0x0409 (English,USA)
};

code byte stringDescriptor1[] =
{
    0x1A, STRING_DESCRIPTOR, // bLength, bDscType
    'E', 0x00, 'm', 0x00, 'b', 0x00, 'o', 0x00,
    's', 0x00, 's', 0x00, 'e', 0x00, 'r', 0x00,
    ' ', 0x00, ' ', 0x00,
    ' ', 0x00, ' ', 0x00,
};

code byte stringDescriptor2[] =
{
    0x20, STRING_DESCRIPTOR, // bLength, bDscType
    'U', 0x00, 'S', 0x00, 'B', 0x00, ' ', 0x00,
    'B', 0x00, 'r', 0x00, 'a', 0x00, 'i', 0x00,
    'l', 0x00, 'l', 0x00, 'e', 0x00, ' ', 0x00,
    '0', 0x00, '.', 0x00, '1', 0x00,
};

volatile BDT at 0x0400 ep0Bo; //Endpoint #0 BD Out
volatile BDT at 0x0404 ep0Bi; //Endpoint #0 BD In
volatile BDT at 0x0408 ep1Bo; //Endpoint #1 BD Out
volatile BDT at 0x040C ep1Bi; //Endpoint #1 BD In
volatile BDT at 0x0410 ep2Bo; //Endpoint #2 BD Out
volatile BDT at 0x0414 ep2Bi; //Endpoint #2 BD In

// TBD: add definitions for additional endpoints (2-16).

// Colocar los buffers endpoint 0 dentro del puerto RAM dual
#pragma udata usbram5 SetupPacket controlTransferBuffer
volatile setupPacketStruct SetupPacket;
volatile byte controlTransferBuffer[E0SZ];

// Colocar los buffers I/O de USB dentro del puerto RAM dual
#pragma udata usbram5 RxBuffer TxBuffer

#pragma udata usbram6 RxBuffer2 TxBuffer2
// Buffers especificos
volatile byte RxBuffer[OSZ];
volatile byte TxBuffer[ISZ];
volatile byte RxBuffer2[OSZ];
volatile byte TxBuffer2[ISZ];

//
// Inicializador de los Endpoints
void InitEndpoint(void)
{
    // Enciende ambos endpoint para entrada y salida (EP1 y EP2)
        UEP1 = 0x1E;  // Ver hoja de datos PIC pag 169 (USB Endpoint 1 Control)
        UEP2 = 0x1E; // Config de endpoint 2 (identica a la de EP1)
// Cargar el BDT de EP1
        ep1Bo.Cnt = sizeof(RxBuffer);
        ep1Bo.ADDR = PTR16(&RxBuffer);
        ep1Bo.Stat = UOWN | DTSEN;
        ep1Bi.ADDR = PTR16(&TxBuffer);
        ep1Bi.Stat = DTS;

// Cargar el BDT de EP2
        ep2Bo.Cnt = sizeof(RxBuffer2);
        ep2Bo.ADDR = PTR16(&RxBuffer2);
        ep2Bo.Stat = UOWN | DTSEN;
        ep2Bi.ADDR = PTR16(&TxBuffer2);
        ep2Bi.Stat = DTS;
}


//
// Funciones de tranferencia de datos IN y OUT (Bulk)

// Funcion BulkIn. La función devuelve la cantidad de bytes que el SIE envia al host
// Funcion BulkIn. La función devuelve la cantidad de bytes que el SIE envia al host
byte BulkIn(byte ep_num, byte *buffer, byte len){
        byte i;
// Seleccion del EP segun la entrada ep_num
if (ep_num == 1){        

        // Si la CPU aún posee el SIE, entonces que no trate de escribir datos para evitar
        // un comportamiento impredecible. Por lo tanto la funcion devuelve 0
        // Ver hoja de datos del PIC sección 17.4.1.1 - Buffer Ownwership pag 171
        if (ep1Bi.Stat & UOWN)
                return 0;
       
   // Se truncan las solicitudes que son demasiado largas. TBD: send
        if(len > ISZ)
                len = ISZ;
       
   // Se copian los datos del buffer de usuario al buffer dual de RAM
        for (i = 0; i < len; i++)
                TxBuffer[i] = buffer[i];
       
   // Cambia el bit de dato y da control al SIE
        ep1Bi.Cnt = len;
        if(ep1Bi.Stat & DTS)
                ep1Bi.Stat = UOWN | DTSEN;
        else
                ep1Bi.Stat = UOWN | DTS | DTSEN;

  // Finalmente la función devuelve la cantidad de bytes que va a enviar el SIE a host
        return len;
}

else if (ep_num == 2){

        // Si la CPU aún posee el SIE, entonces que no trate de escribir datos para evitar
        // un comportamiento impredecible. Por lo tanto la funcion devuelve 0
        // Ver hoja de datos del PIC sección 17.4.1.1 - Buffer Ownwership pag 171
        if (ep2Bi.Stat & UOWN)
                return 0;
       
   // Se truncan las solicitudes que son demasiado largas. TBD: send
        if(len > ISZ)
                len = ISZ;
       
   // Se copian los datos del buffer de usuario al buffer dual de RAM
        for (i = 0; i < len; i++)
                TxBuffer2[i] = buffer[i];
       
   // Cambia el bit de dato y da control al SIE
        ep2Bi.Cnt = len;
        if(ep2Bi.Stat & DTS)
                ep2Bi.Stat = UOWN | DTSEN;
        else
                ep2Bi.Stat = UOWN | DTS | DTSEN;

  // Finalmente la función devuelve la cantidad de bytes que va a enviar el SIE a host
        return len;
}
// Si ninguno de los endpoints tienen algo devuelvo 0
return 0;
}
// Funcion BulkOut. La función devuelve la cantidad de bytes que se recibieron
byte BulkOut(byte ep_num, byte *buffer, byte len) {
RxLen = 0;

if (ep_num == 1){
    // Si el SIE no posee el buffer del descriptor de salida, entonces es seguro
    // extraer los datos
        if(!(ep1Bo.Stat & UOWN)) {
    // Se fija si el host envió menos bytes que los que fueron pedidos
                if(len > ep1Bo.Cnt)
                        len = ep1Bo.Cnt;

    // Copia los datos del buffer dual de RAM al buffer de usuario
                for(RxLen = 0; RxLen < len; RxLen++)
                        buffer[RxLen] = RxBuffer[RxLen];

    // Resetea (como al inicio) el buffer del descriptor de salida así el host
    // puede enviar mas datos, campo de estado (Stat) de la tabla del descriptor
                ep1Bo.Cnt = sizeof(RxBuffer);
                if(ep1Bo.Stat & DTS)
                        ep1Bo.Stat = UOWN | DTSEN;
                else
                        ep1Bo.Stat = UOWN | DTS | DTSEN;
        }
}
else if (ep_num == 2){
    // Si el SIE no posee el buffer del descriptor de salida, entonces es seguro
    // extraer los datos
        if(!(ep2Bo.Stat & UOWN)) {
    // Se fija si el host envió menos bytes que los que fueron pedidos
                if(len > ep2Bo.Cnt)
                        len = ep2Bo.Cnt;

    // Copia los datos del buffer dual de RAM al buffer de usuario
                for(RxLen = 0; RxLen < len; RxLen++)
                        buffer[RxLen] = RxBuffer2[RxLen];

    // Resetea (como al inicio) el buffer del descriptor de salida así el host
    // puede enviar mas datos, campo de estado (Stat) de la tabla del descriptor
                ep2Bo.Cnt = sizeof(RxBuffer2);
                if(ep2Bo.Stat & DTS)
                        ep2Bo.Stat = UOWN | DTSEN;
                else
                        ep2Bo.Stat = UOWN | DTS | DTSEN;
        }
}

return RxLen;
}
//
// Comienzo del código para procesar las solicitudes estándar (Cap 9 USB)
//

// Solicitud GET_DESCRIPTOR (X) (los datos parecen estar contenidos el el paquete Setup)
// (X) será Device, Configuration o String según se identifique al tipo de solicitud

static void GetDescriptor(void)
{

    if(SetupPacket.bmRequestType == 0x80)  // Dirección del dato de dispositivo a host
    {
        byte descriptorType  = SetupPacket.wValue1; // El MSB contiene el tipo de descriptor
        byte descriptorIndex = SetupPacket.wValue0; // El LSB contiene el índice de descriptor

  // GetDescriptor(Device)
        if (descriptorType == DEVICE_DESCRIPTOR) // Indentifica si la solicitud es de dispositivo
        {
                requestHandled = 1;             // La solicitud fue tomada
                outPtr = (byte *)&deviceDescriptor; // Apunta a la dirección del descriptor
                wCount = DEVICE_DESCRIPTOR_SIZE; // El tamaño de este descriptor es de 0x12 bytes
        }
  // GetDescriptor(Configuration)
        // En este caso también trae los descriptores de Interface y Endpoint
        else if (descriptorType == CONFIGURATION_DESCRIPTOR) // Si la solicitud es de configuración
        {
                requestHandled = 1;
                outPtr = (byte *)&configDescriptor;
                wCount = configDescriptor.configHeader[2]; // Note: SDCC makes bad code with this
        }

  // GetDescriptor(String)

        else if (descriptorType == STRING_DESCRIPTOR) // Indentifica si la solicitud es string
        {
                requestHandled = 1;
                if (descriptorIndex == 0)       // El primer string contiene el Codigo de lenguaje
                    outPtr = (byte *) &stringDescriptor0; // Apunta a la dirección del primer descriptor
                else if (descriptorIndex == 1)  // Gralmente el segundo trae el nombre del autor
                    outPtr = (byte *) &stringDescriptor1;
                else
                    outPtr = (byte *) &stringDescriptor2; // Y el ultimo el nombre del dispositivo
                wCount = *outPtr;       // Devuelve la indirección del puntero ya que el primer
                                        // byte de los decriptores contiene el tamaño que ocupan
                                        // Esto mismo se podría haber hecho en los casos anteriores
        }
        else
        {
        // No se reconoce que solicita...
        // Se podría escribir algunas lineas para que vuelva y guardar en una variable un código
        // de error, pudiendo saltar o realizar alguna interrupción.
        // Luego con una tabla se reconoce el tipo de error. También se puede hacer
        // parpardear un LED que avise el error
        }
    }
}

// Solicitud GET_STATUS (los datos parecen estar contenidos en el paquete Setup)
static void GetStatus(void)
{
        // Enmascara los bits recibidos
    byte recipient = SetupPacket.bmRequestType & 0x1F; // D4..0 es Recipient (Dev, Interf o Endp)
        // Se cargan los buffer de la transferencia en cero, para poder enmascarar con operadores OR
    controlTransferBuffer[0] = 0;
    controlTransferBuffer[1] = 0;

  // GetStatus(Device)
    if (recipient == 0x00)
    {
            // El desriptor solicitado es el dispositivo entonces se envía buffer con el
            // estado en que está el dispositivo
        requestHandled = 1;
        // Establece los bits para el estado de auto alimentacion y despertar remoto
        // El estado se define con los 2 bits menos siginificativos
        if (selfPowered)
                // Setear el primer bit (selfPowered)
                controlTransferBuffer[0] |= 0x01;
        if (remoteWakeup)
                // Setear el segundo bit (remoteWakeup)
                controlTransferBuffer[0] |= 0x02;
    }
  // GetStatus(Interfaz)
    else if (recipient == 0x01)  // El descriptor solicitado es la interfaz,
        requestHandled = 1;
  // GetStatus(Endpoint)
    else if (recipient == 0x02) // El descriptor solicitado es un endpoint
        // La solicitud Get Status de un endpoint devuelve el estado Halted/Stalled
        // del endpoint en el D0
    {
        // Los 4 bits menos significativos de Windex de la solicitud contienen
        // el número de endpoint, se guardan en la variable
        //
        // D15 D14 D13 D12 D11 D10 D9 D8 D7 D6 D5 D4 D3 D2 D1 D0
        //----------------------------- Dir ----- Endpoint Number


        byte endpointNum = SetupPacket.wIndex0 & 0x0F;
        // La dirección del flujo de datos está en el bit D7 de Windex
        byte endpointDir = SetupPacket.wIndex0 & 0x80;
        requestHandled = 1;

        // Cada descriptor de endpoint tiene una longitud de 8 bytes, llevando 4 bytes de
        // separación entre las tablas de los descriptores.
        // Ver la organización de memoria de la Tabla de Descriptores de Endpoint en la
        // hoja de datos del PIC pag 171, para

        inPtr = (byte *)&ep0Bo + (endpointNum * 8);
        //posiciona desde la direccion del EP0Out + el offset de 8 bytes        
        if (endpointDir) // Si D7 = 1 es un endpoint de tipo IN
            inPtr += 4;

        if(*inPtr & BSTALL) // El valor al que apunta el puntero y el estado del bit D0
            controlTransferBuffer[0] = 0x01;
    }
        // Si la solicitud fue tomada por alguno de los anteriores (requestHandled)
        // la información fue cargada en los dos primeros elementos del arreglo de bytes
        // controlTransferBuffer, por lo tanto se posiciona al puntero OUT de usuario
        // en la dirección del arreglo y se cargan 2 bytes correspondientes al tamaño
        // de la solicitud a procesar
        if (requestHandled)
        {
                outPtr = (byte *)&controlTransferBuffer;
                wCount = 2;
        }
}

// Solicitudes SET_FEATURE(X) y CLEAR_FEATURE(X)
// (Usadas para activar/desactivar características booleanas)

static void SetFeature(void)
{
    byte recipient = SetupPacket.bmRequestType & 0x1F; // D4..0 es Recipient (Dev, Interf o Endp)
        // El valor de la caracteristica viene en el byte0 de wValue del paquete
    byte feature = SetupPacket.wValue0;

  // SetFeature(Device)
    if (recipient == 0x00) // El desriptor solicitado es el dispositivo
        // Las únicas dos características disponbles son DEVICE_REMOTE_WAKEUP (0X01) y TEST_MODE
    {
        if (feature == DEVICE_REMOTE_WAKEUP)
        {
            requestHandled = 1;

            if (SetupPacket.bRequest == SET_FEATURE)
                remoteWakeup = 1;
            else
                remoteWakeup = 0;
        }
        // TEST_MODE no está implementado...
        // TBD: Handle TEST_MODE
       
  // SetFeature(Interface)
        // Según la especificación no hay funciones set y clear de características para Interface
        // Pueden ser usadas para establecer características booleanas
    }
  // SetFeature(Endpoint)
    else if (recipient == 0x02) // El desriptor solicitado es el endpoint
    {
// Para obtener número y tipo (IN/OUT) de Endpoint se obtienen nuevamente del Windex del paquete

        byte endpointNum = SetupPacket.wIndex0 & 0x0F;
        byte endpointDir = SetupPacket.wIndex0 & 0x80;
        // Indentifica si la característica solicitada es detener el Endpoint anterior
        if ((feature == ENDPOINT_HALT) && (endpointNum != 0))
        {
            requestHandled = 1;

        // Cada descriptor de endpoint tiene una longitud de 8 bytes, llevando 4 bytes de
        // separación entre las tablas de los descriptores
        // Ver la organización de memoria de la Tabla de Descriptores de Endpoint en la
        // hoja de datos del PIC

        // Detiene el endpoint mientras no sea el endpoint 0
            inPtr = (byte *)&ep0Bo + (endpointNum * 8);
            if (endpointDir)
                inPtr += 4;

            if(SetupPacket.bRequest == SET_FEATURE)
                *inPtr = 0x84;
            else
            {
        // Si es el endpoint 1...
                if(endpointDir == 1)
                    *inPtr = 0x00;
                else
                    *inPtr = 0x88;
            }
        }
    }
}

// Proceso de las solicitudes estándares

void ProcessStandardRequest(void)
{
    byte request = SetupPacket.bRequest;
		printf ("SetupPacket.bmRequestType %x\n\r",SetupPacket.bmRequestType);

    // Se indentifican las solicitudes sean de tipo estandar
    if((SetupPacket.bmRequestType & 0x60) != 0x00)
        // Esta función atiende solo a las solicitudes estandar del USB (D6D5 = 00b)
        // Se enmascaran para detectar solo las solicitudes estandar del USB
        // En caso de que sean solicitudes de Clase o Vendedor no se procesan con esta función
        return;

  // SetAddress(Device)
    if (request == SET_ADDRESS)
    {
        // Establece la dirección del dispositivo.  Todas las solicitudes futuras
        // vendrán a esa dirección. En realidad, no se se puede establecer UADDR
        // a la nueva direccióm aun porque el resto de la transacción SET_ADDRESS
        // utiliza la dirección 0.
            requestHandled = 1;
            deviceState = ADDRESS;
        // Se guarda la nueva direccion en la variable definida para este fin
            deviceAddress = SetupPacket.wValue0;
    }
    else if (request == GET_DESCRIPTOR)
    {
            GetDescriptor();
    }
  // SetConfiguration(Device)
    else if (request == SET_CONFIGURATION)
    {
            requestHandled = 1;
            currentConfiguration = SetupPacket.wValue0;
            // TBD: ensure the new configuration value is one that
            // exists in the descriptor.
            if (currentConfiguration == 0)
                // Si el valor de la configuración es cero, el dispositivo se coloca
                // en el estado direccionado (USB 2.0 - 9.4.7)
                deviceState = ADDRESS;
            else
            {
                // Establece la configuración
                deviceState = CONFIGURED;
                // Inicializa los endpoints para todas las interfaces
                InitEndpoint();
                // TBD: Add initialization code here for any additional
                // interfaces beyond the one used for the HID
            }
    }
  // GetConfiguration(Device)
    else if (request == GET_CONFIGURATION)
    {
            requestHandled = 1;
            outPtr = (byte*)&currentConfiguration;
            wCount = 1;
    }
    else if (request == GET_STATUS)
    {
            GetStatus();
    }
    else if ((request == CLEAR_FEATURE) ||
        (request == SET_FEATURE))
    {
            SetFeature();
    }
    else if (request == GET_INTERFACE)
    {
            // No se soporta interfaces alternadas. Se envía
            // cero de regreso al host.

            requestHandled = 1;
            controlTransferBuffer[0] = 0;
            outPtr = (byte *) &controlTransferBuffer;
            wCount = 1;
    }
    else if (request == SET_INTERFACE)
    {
            // No se soporta interfaces alternadas - solo se ignora
            requestHandled = 1;
    }
    //else if (request == SET_DESCRIPTOR)
    //else if (request == SYNCH_FRAME)
    //else
}

// Etapa de datos de la transferencia de control que envía datos al host
void InDataStage(void)
{
    byte i;
    word bufferSize;

    // Determina cuantos bytes se envían al host, en caso de que la cantidad de datos supere
    // el tamaño del EP0, lo que va a llevar a multiples transacciones para completarse.
    if(wCount < E0SZ)
        bufferSize = wCount;
    else
        bufferSize = E0SZ;

    // Carga los dos bits altos del contador de bits en BC8:BC9
    ep0Bi.Stat &= ~(BC8 | BC9); // Borra BC8 y BC9
    ep0Bi.Stat |= (byte)((bufferSize & 0x0300) >> 8);
    ep0Bi.Cnt = (byte)(bufferSize & 0xFF);
    ep0Bi.ADDR = PTR16(&controlTransferBuffer);

    // Actualiza la cantidad de bytes que todavía necesitan ser enviados. Tomando
    // todo el dato de regreso al host puede llevar multiples transacciones, así
    // se calcula el nuevo valor que quedan todavía para una futura entrega
    wCount = wCount - bufferSize;


    // Mueve el dato al buffer de salida USB donde queda asentado
    inPtr = (byte *)&controlTransferBuffer;

    for (i=0;i<bufferSize;i++)
        *inPtr++ = *outPtr++; //Copia los contenidos de los buffer bit a bit
}

// Etapa de datos de la transferencia de control que lee datos provenientes del host
void OutDataStage(void)
{
    word i, bufferSize;

    bufferSize = ((0x03 & ep0Bo.Stat) << 8) | ep0Bo.Cnt;

    // Total acumulado de la cantidad de bytes leidos
    wCount = wCount + bufferSize;

    outPtr = (byte*)&controlTransferBuffer;

    for (i=0;i<bufferSize;i++)
        *inPtr++ = *outPtr++; //Copia los contenidos de los buffer bit a bit
}

// Proceso del la etapa de setup en una transferencia de control. Este código inicializa
// las banderas que le permiten al firmware saber que hacer durante los estados subsecuentes
// de la transferencia

void SetupStage(void)
{
    // Nota: Microchip establece desactivar el bit UOWN bit en la direccion IN tan pronto
    // como sea posible después de detectar que el paquete SETUP ha sido recibido
    ep0Bi.Stat &= ~UOWN;
    ep0Bo.Stat &= ~UOWN;

    // Inicializa el proceso de transferncia
    ctrlTransferStage = SETUP_STAGE;
    requestHandled = 0; // La solicitud no ha sido manejada todavía
    wCount = 0;         // No hay bits transferidos todavía

    // Se fija si la solicitud corresponde a una de tipo estandar (Según lo definido en Cap 9 de USB)
    ProcessStandardRequest();
    // TBD: Add handlers for any other classes/interfaces in the device

    if (!requestHandled)
    {
        // Si el servicio no fue manejado luego de procesar las solicitudes estádar
        // entonces se detienen los EP0 (endpoints 0 = stalled)
        ep0Bo.Cnt = E0SZ;
        ep0Bo.ADDR = PTR16(&SetupPacket);
        ep0Bo.Stat = UOWN | BSTALL;
        ep0Bi.Stat = UOWN | BSTALL;
    }
// Se identifica la dirección del flujo de datos para comenzar con el paquete
    else if (SetupPacket.bmRequestType & 0x80)
    {
        // Dispositivo a host
        if(SetupPacket.wLength < wCount)
            wCount = SetupPacket.wLength;

        InDataStage();
        ctrlTransferStage = DATA_IN_STAGE;
       
        // Resetea el descriptor del buffer para el endpoint 0
        ep0Bo.Cnt = E0SZ;
        ep0Bo.ADDR = PTR16(&SetupPacket);
        ep0Bo.Stat = UOWN;

        // Establece el descriptor del buffer del endpoint 0 para enviar el dato

        ep0Bi.ADDR = PTR16(&controlTransferBuffer);
        ep0Bi.Stat = UOWN | DTS | DTSEN;
    }
    else
    {
        // Host a dispositivo
        ctrlTransferStage = DATA_OUT_STAGE;

        // Borra el descriptor del buffer de entrada
        ep0Bi.Cnt = 0;
        ep0Bi.Stat = UOWN | DTS | DTSEN;

        // Establece el descritptor del buffer en el endpoint 0 para recibir datos
        // con la dirección y el estado correspondiente
        ep0Bo.Cnt = E0SZ;
        ep0Bo.ADDR = PTR16(&controlTransferBuffer);
        ep0Bo.Stat = UOWN | DTS | DTSEN;
    }
    // Habilita el proceso de muestra y paquete del SIE
    UCONbits.PKTDIS = 0;
}

// Configura el descriptor del buffer para el endpoint 0 asi queda esperando para
// la etapa de estado de una transferencia de control
void WaitForSetupStage(void)
{
    ctrlTransferStage = SETUP_STAGE;
    ep0Bo.Cnt = E0SZ;
    ep0Bo.ADDR = PTR16(&SetupPacket);
    ep0Bo.Stat = UOWN | DTSEN; // Le al SIE, habilita el chequeo de toggle del dato
    ep0Bi.Stat = 0x00;         // Da el control al CPU
}

// Este es el punto inicial del proceso de la transferencia de control. El codigo directamente
// sigue la secuencia de transacciones descriptas en el cap 5 del USB2.0.
// El único flujo de control en este firmware es el Flujo de Control por defecto (endpoint 0).
// Los mensajes de control que tiene diferente destino son descartados
void ProcessControlTransfer(void)
{
    if (USTAT == 0)
    {
        // Endpoint 0: salida
        byte PID = (ep0Bo.Stat & 0x3C) >> 2; // Extrae el PID del medio de BD0STAT
 // Se identifica la idenificación del paquete para iniciar el la transacción correspondiente
      
		if (PID == 0x0D)
            // SETUP PID - comienzo de una transacción
            SetupStage();
        else if (ctrlTransferStage == DATA_OUT_STAGE)
        {
            // Completa la etapa de datos asi todas la información ha
            // pasado del host al dispositivo antes de atenderlo
            OutDataStage();

            // Devuelve el control sobre el SIE y cambia el bit de dato
            if(ep0Bo.Stat & DTS)
                ep0Bo.Stat = UOWN | DTSEN;
            else
                ep0Bo.Stat = UOWN | DTS | DTSEN;
        }
        else
        {
            // Se prepara para la etapa de setup de una trasnferencia de control
            WaitForSetupStage();
        }
    }
    else if(USTAT == 0x04)
    {
        // Endpoint 0: entrada
        if ((UADDR == 0) && (deviceState == ADDRESS))
        {
            // TBD: ensure that the new address matches the value of
            // "deviceAddress" (which came in through a SET_ADDRESS).
            UADDR = SetupPacket.wValue0;

            if(UADDR == 0)
                // Si recibimos un reset despues de un SET_ADDRESS, entonces necesitamos
                // regresar al estado Default
                deviceState = DEFAULT;
        }

        if (ctrlTransferStage == DATA_IN_STAGE)
        {
            // Comienzo (o continuación) de la transmision de dato
            InDataStage();

            // Devuelve el control sobre el SIE y cambia el bit de dato
            if(ep0Bi.Stat & DTS)
                ep0Bi.Stat = UOWN | DTSEN;
            else
                ep0Bi.Stat = UOWN | DTS | DTSEN;
        }
        else
        {
            // Prepara para la etapa de setup de una transferencia de control
            WaitForSetupStage();
        }
    }
    //else

}

// Habilitación del módulo USB

void EnableUSBModule(void)
{
    // TBD: Check for voltage coming from the USB cable and use that
    // as an indication we are attached.

    if(UCONbits.USBEN == 0)
    {
        UCON = 0;
        UIE = 0;
        UCONbits.USBEN = 1;
        deviceState = ATTACHED;
    }

    // Si fue enchufado y no se detecto un single-ended zero, entonces
    // nos movemos al estado Powered
    if ((deviceState == ATTACHED) && !UCONbits.SE0)
    {
        UIR = 0;
        UIE = 0;
        UIEbits.URSTIE = 1;
        UIEbits.IDLEIE = 1;
        deviceState = POWERED;
    }
}

// Desuspender el dispositivo
void UnSuspend(void)
{
    UCONbits.SUSPND = 0;
    UIEbits.ACTVIE = 0;
    UIRbits.ACTVIF = 0;
}


// Los dispositivos Full speed toman un paquete Start Of Frame (SOF) cada 1 milisegundo
// Con esta interrupción, simplemente se enmascara y no se hace nada mas
void StartOfFrame(void)
{
    // TBD: Add a callback routine to do something
    UIRbits.SOFIF = 0;
}

// Esta rutina es una llamada en respuesta al codigo deteniendo un endpoint.
void Stall(void)
{
   if(UEP0bits.EPSTALL == 1)
    {
        // Se prepara para la etapa de Setup de una trasferencia de control
        WaitForSetupStage();
        UEP0bits.EPSTALL = 0;
    }
    UIRbits.STALLIF = 0;
}

void BusReset()
{
    UEIR  = 0x00;
    UIR   = 0x00;
    UEIE  = 0x9f;
    UIE   = 0x7b;
    UADDR = 0x00;

    // Establece el endpoint 0 como un flujo de control
    UEP0 = 0x16;

    // Hace fluir alguna transaccion pendiente
    while (UIRbits.TRNIF == 1)
        UIRbits.TRNIF = 0;

    // Habilita el proceso del paquete
    UCONbits.PKTDIS = 0;

    // Prepara para la etapa de Setup de una transferencia de control
    WaitForSetupStage();
    remoteWakeup = 0;         // Remote wakeup esta apagado por defecto
    selfPowered = 0;          // Self powered esta apagado por defecto
    currentConfiguration = 0; // Borra la configuracion activa
    deviceState = DEFAULT;
}

// Punto de entrada principal para las tareas de USB. Chequea interrupciones, luego chequea para
// transacciones

void ProcessUSBTransactions(void)
{
    // Ve si el dispositivo esta conectado todavia
    if(deviceState == DETACHED)
        return;

    // Si el USB activo entonces despierta de suspendido
    if(UIRbits.ACTVIF && UIEbits.ACTVIE)
        UnSuspend();

    // Se supone que esta suspendido, entonces no se trata de realizar ningun proceso
    if(UCONbits.SUSPND == 1)
        return;

     // Procesa un reset del bus
    if (UIRbits.URSTIF && UIEbits.URSTIE)
        BusReset();

    if (UIRbits.IDLEIF && UIEbits.IDLEIE)
        // No hay actividad en el bus por un momento

    if (UIRbits.SOFIF && UIEbits.SOFIE)
        StartOfFrame();

    if (UIRbits.STALLIF && UIEbits.STALLIE)
        Stall();

    if (UIRbits.UERRIF && UIEbits.UERRIE)
        // Significa que hubo errores
        // TBD: See where the error came from.
        // Borra los errores
        UIRbits.UERRIF = 0;

    // Si no ha sido reseteado por el host, no hay necesidad de mantener procesando
    if (deviceState < DEFAULT)
        return;

    // Una transaccion ha terminado. Intenta procesar por defecto en el endpoint 0.
    if(UIRbits.TRNIF && UIEbits.TRNIE)
    {
        ProcessControlTransfer();
        // Apaga las banderas de interrupcion
        UIRbits.TRNIF = 0;
    }
}


#if 0
// Test - put something into EEPROM
code at 0xF00000 word dataEEPROM[] =
{
    0, 1, 2, 3, 4, 5, 6, 7,
    '0', '1', '2', '3', '4', '5', '6', '7',
    '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
};
#endif

