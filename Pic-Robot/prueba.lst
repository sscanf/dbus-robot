gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 9-1-2014  01:28:51
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.3.0 #8604 (Dec 30 2013) (Linux)
                                           ; This file was generated Wed Aug 27 21:11:52 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	___uflags
                                           	global	__entry
                                           	global	__startup
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_stack_end
                                           	extern	_TBLPTRU
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRL
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_TABLAT
                                           	extern	_POSTINC0
                                           	extern	_main
                                           	extern	_cinit
                                           
                                           
                                           	idata
                                           ___uflags	db	0x00
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_crt0i___entry	code	0X000000
                                           __entry:
000000   ef6c     goto	0x2ed8              	goto __startup
000002   f017
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_crt0i___startup	code
                                           __startup:
                                           	; Initialize the stack pointer
002ed8   ee11     lfsr	0x1, 0x1ff          	lfsr 1, _stack_end
002eda   f0ff
002edc   ee21     lfsr	0x2, 0x1ff          	lfsr 2, _stack_end
002ede   f0ff
                                           	; 1st silicon does not do this on POR
002ee0   6af8     clrf	0xf8, 0             	clrf _TBLPTRU, 0
                                           	; Initialize the flash memory access configuration.
                                           	; This is harmless for non-flash devices, so we do it on all parts.
002ee2   8ea6     bsf	0xa6, 0x7, 0         	bsf 0xa6, 7, 0 ; EECON1.EEPGD = 1, TBLPTR accesses program memory
002ee4   9ca6     bcf	0xa6, 0x6, 0         	bcf 0xa6, 6, 0 ; EECON1.CFGS = 0, TBLPTR accesses program memory
                                           	; TBLPTR = &cinit
002ee6   0ece     movlw	0xce               	movlw low(_cinit)
002ee8   6ef6     movwf	0xf6, 0            	movwf _TBLPTRL, 0
002eea   0e3d     movlw	0x3d               	movlw high(_cinit)
002eec   6ef7     movwf	0xf7, 0            	movwf _TBLPTRH, 0
002eee   0e00     movlw	0                  	movlw upper(_cinit)
002ef0   6ef8     movwf	0xf8, 0            	movwf _TBLPTRU, 0
                                           	; 0x05 = cinit.num_init
002ef2   0009     tblrd	*+                 	tblrd*+
002ef4   cff5     movff	0xff5, 0x5         	movff _TABLAT, 0x05
002ef6   f005
002ef8   0009     tblrd	*+                 	tblrd*+
002efa   cff5     movff	0xff5, 0x6         	movff _TABLAT, (0x05 + 1)
002efc   f006
                                           	; while (0x05)
002efe   d034     bra	0x2f68               	bra entry_loop_dec
                                           entry_loop:
                                           	; Count down so we only have to look up the data in _cinit once.
                                           	; At this point we know that TBLPTR points to the top of the current
                                           	; entry in _cinit, so we can just start reading the from, to, and
                                           	; size values.
                                           	; Read the source address low.
                                           	; 0x00 = 0x07 ->from;
002f00   0009     tblrd	*+                 	tblrd*+
002f02   cff5     movff	0xff5, 0           	movff _TABLAT, 0x00
002f04   f000
                                           	; source address high
002f06   0009     tblrd	*+                 	tblrd*+
002f08   cff5     movff	0xff5, 0x1         	movff _TABLAT, (0x00 + 1)
002f0a   f001
                                           	; source address upper
002f0c   0009     tblrd	*+                 	tblrd*+
002f0e   cff5     movff	0xff5, 0x2         	movff _TABLAT, (0x00 + 2)
002f10   f002
                                           	; Skip 0 byte since it is stored as 0 32bit int.
002f12   0009     tblrd	*+                 	tblrd*+
                                           	; Read the destination address directly into FSR0
                                           	; destination address low.
                                           	; FSR0 = (unsigned short)0x07 ->to;
002f14   0009     tblrd	*+                 	tblrd*+
002f16   cff5     movff	0xff5, 0xfe9       	movff _TABLAT, _FSR0L
002f18   ffe9
                                           	; destination address high
002f1a   0009     tblrd	*+                 	tblrd*+
002f1c   cff5     movff	0xff5, 0xfea       	movff _TABLAT, _FSR0H
002f1e   ffea
                                           	; Skip two bytes since it is stored as 0 32bit int.
002f20   0009     tblrd	*+                 	tblrd*+
002f22   0009     tblrd	*+                 	tblrd*+
                                           	; Read the size of data to transfer to destination address.
                                           	; 0x03 = (unsigned short)0x07 ->size;
002f24   0009     tblrd	*+                 	tblrd*+
002f26   cff5     movff	0xff5, 0x3         	movff _TABLAT, 0x03
002f28   f003
002f2a   0009     tblrd	*+                 	tblrd*+
002f2c   cff5     movff	0xff5, 0x4         	movff _TABLAT, (0x03 + 1)
002f2e   f004
                                           	; Skip two bytes since it is stored as 0 32bit int.
002f30   0009     tblrd	*+                 	tblrd*+
002f32   0009     tblrd	*+                 	tblrd*+
                                           	; 0x00 = 0x07 ->from;
                                           	; FSR0 = (unsigned short)0x07 ->to;
                                           	; 0x03 = (unsigned short)0x07 ->size;
                                           	; The table pointer now points to the next entry. Save it
                                           	; off since we will be using the table pointer to do the copying
                                           	; for the entry.
                                           	; 0x07 = TBLPTR
002f34   cff6     movff	0xff6, 0x7         	movff _TBLPTRL, 0x07
002f36   f007
002f38   cff7     movff	0xff7, 0x8         	movff _TBLPTRH, (0x07 + 1)
002f3a   f008
002f3c   cff8     movff	0xff8, 0x9         	movff _TBLPTRU, (0x07 + 2)
002f3e   f009
                                           	; Now assign the source address to the table pointer.
                                           	; TBLPTR = 0x00
002f40   c000     movff	0, 0xff6           	movff 0x00, _TBLPTRL
002f42   fff6
002f44   c001     movff	0x1, 0xff7         	movff (0x00 + 1), _TBLPTRH
002f46   fff7
002f48   c002     movff	0x2, 0xff8         	movff (0x00 + 2), _TBLPTRU
002f4a   fff8
002f4c   d003     bra	0x2f54               	bra copy_loop_dec
                                           copy_loop:
002f4e   0009     tblrd	*+                 	tblrd*+
002f50   cff5     movff	0xff5, 0xfee       	movff _TABLAT, _POSTINC0
002f52   ffee
                                           copy_loop_dec:
                                           	; while (--0x03);
                                           	; Decrement and test the byte counter.
                                           	; The cycle ends when the value of counter reaches the -1.
002f54   0603     decf	0x3, 0x1, 0         	decf 0x03, f, 0
002f56   e2fb     bc	0x2f4e                	bc copy_loop
002f58   0604     decf	0x4, 0x1, 0         	decf (0x03 + 1), f, 0
002f5a   e2f9     bc	0x2f4e                	bc copy_loop
                                           	; Restore the table pointer for the next entry.
                                           	; TBLPTR = 0x07
002f5c   c007     movff	0x7, 0xff6         	movff 0x07, _TBLPTRL
002f5e   fff6
002f60   c008     movff	0x8, 0xff7         	movff (0x07 + 1), _TBLPTRH
002f62   fff7
002f64   c009     movff	0x9, 0xff8         	movff (0x07 + 2), _TBLPTRU
002f66   fff8
                                           entry_loop_dec:
                                           	; while (--0x05);
                                           	; Decrement and test the entry counter.
                                           	; The cycle ends when the value of counter reaches the -1.
002f68   0605     decf	0x5, 0x1, 0         	decf 0x05, f, 0
002f6a   e2ca     bc	0x2f00                	bc entry_loop
002f6c   0606     decf	0x6, 0x1, 0         	decf (0x05 + 1), f, 0
002f6e   e2c8     bc	0x2f00                	bc entry_loop
                                           	
                                           ;	.line	240; /usr/share/sdcc/lib/src/pic16/startup/crt0i.c	main ();
002f70   ec8c     call	0x3118, 0           	CALL	_main
002f72   f018
                                           lockup:
                                           	; Returning from main will lock up.
002f74   d7ff     bra	0x2f74               	bra lockup
                                           	
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  218 (0x00da) bytes ( 0.17%)
                                           ;           	  109 (0x006d) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
